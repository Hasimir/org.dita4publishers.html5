<?xml version="1.0" encoding="utf-8"?><!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.
-->

<project name="theme.builder" basedir=".">

  <condition property="os.path.separator" value="\\">
    <os family="windows"/>
  </condition>

  <condition property="os.path.separator" value="/">
    <not>
      <os family="windows"/>
   </not>
  </condition>

  <property name="regex.file.separator" value="[\\|/]" />

  <dirname property="theme.builder.dir" file="${ant.file.theme.builder}"/>
  <property name="dita.plugins.dir" location="${theme.builder.dir}${file.separator}..${file.separator}" />
  <property name="ditaot.dir" location="${theme.builder.dir}${file.separator}..${file.separator}..${file.separator}"/>
  <property name="ditaot.temp.dir" location="${theme.builder.dir}${os.path.separator}..${os.path.separator}..${os.path.separator}temp"/>
  <property name="d4p.html5.dir" location="${theme.builder.dir}" />

  <mkdir dir="${ditaot.temp.dir}" />

  <loadproperties srcFile="${theme.builder.dir}/shared.properties" />

  <macrodef name="package">
    <attribute name="type" />
    <attribute name="filelist"/>
    <attribute name="to"/>
    <attribute name="theme" />
    <sequential>
        <antcall target="package.compress">
          <param name="type" value="@{type}"/>
          <param name="filelist" value="@{filelist}"/>
          <param name="to" value="@{to}"/>
          <param name="html5.site.theme" value="@{theme}"/>
        </antcall>
    </sequential>
  </macrodef>

   <macrodef name="package-prepare">
    <attribute name="theme" />
     <sequential>
        <antcall target="package.prepare" >
           <param name="html5.site.theme" value="@{theme}"/>
        </antcall>
    </sequential>
  </macrodef>

  <macrodef name="package-get-assets">
    <attribute name="dirlist"/>
    <attribute name="theme" />
    <sequential>
        <antcall target="package.get.assets">
          <param name="dirlist" value="@{dirlist}"/>
          <param name="html5.site.theme" value="@{theme}"/>
        </antcall>
    </sequential>
  </macrodef>

  <macrodef name="package-get">
    <attribute name="dir" />
     <attribute name="theme" />
     <sequential>
        <antcall target="package.get" >
           <param name="output.dir" value="@{dir}"/>
           <param name="html5.site.theme" value="@{theme}"/>
        </antcall>
    </sequential>
  </macrodef>

  <target name="set.properties">
    <!--
      html5 site theme can ne set by
       * args.cssroot
       * setting the property in a previous ant script
    -->
    <condition property="html5.site.theme" value="${args.cssroot}">
      <isset property="args.cssroot" />
    </condition>

    <condition property="html5.site.theme" value="dita-d4p-classic">
      <not>
        <isset property="html5.site.theme" />
      </not>
    </condition>

    <!-- name of the directory which contains the theme configuration file -->
    <condition property="html5.libs.dir" value="html5-themes">
      <not>
        <isset property="html5.libs.dir" />
      </not>
    </condition>

    <!-- Full path of the cached theme directory -->
    <condition property="html5.theme.dir" value="${d4p.html5.dir}${file.separator}${html5.build.themes.dir}${file.separator}${html5.site.theme}">
      <not>
        <isset property="html5.theme.dir" />
      </not>
    </condition>

    <!-- path of the configuration file -->
    <condition property="html5.theme.config.dir" value="${d4p.html5.dir}${file.separator}${html5.libs.dir}">
      <not>
        <isset property="html5.theme.config.dir" />
      </not>
    </condition>

    <!-- path of the theme temp directory, used to build the theme -->
    <property name="html5.temp.theme.dir" location="${ditaot.temp.dir}${file.separator}${html5.themes.dir}${file.separator}${html5.site.theme}" />
    <property name="html5.temp.libs.dir" location="${ditaot.temp.dir}${file.separator}${html5.libs.dir}" />

    <!-- path of the theme output directory -->
    <property name="html5.theme.output.dir" location="${output.dir}${file.separator}${html5.themes.dir}${file.separator}${html5.site.theme}" />

    <available file="${html5.theme.dir}" type="dir" property="html5.theme.exists"/>

    <!-- Default location of the configuration file, the name is the name of the theme itself -->
    <condition property="html5.site.config" value="${html5.theme.config.dir}${file.separator}${html5.site.theme}.xml">
      <not>
        <isset property="html5.site.config" />
      </not>
    </condition>

  </target>

  <target name="package.get" depends="store.builded.theme.dir">
    <echo>Sending assets to the output directory</echo>
    <mkdir dir="${html5.theme.output.dir}" />
     <copy todir="${html5.theme.output.dir}">
       <fileset dir="${html5.theme.dir}"/>
     </copy>
  </target>

  <target name="package.compress" depends="package.concatenate">

    <pathconvert property="fromfile" dirsep="${os.path.separator}">
      <path location="${html5.temp.theme.dir}${file.separator}${type}${file.separator}${to}.${html5.concatenation.prefix}.${type}"/>
    </pathconvert>

    <pathconvert property="tofile" dirsep="${os.path.separator}">
      <path location="${html5.temp.theme.dir}${file.separator}${type}${file.separator}${to}.${type}"/>
    </pathconvert>

	 <echo> +++ Compressing concatenated file
           ${fromfile}
           to ${tofile}
           </echo>

     <java jar="${theme.builder.dir}${file.separator}${compressor.path}"
           fork="true"
           maxmemory="128m"
           failonerror="yes"
           outputproperty="result.process"
           >
		<arg value="-v"/>
        <arg path="${fromfile}"/>
        <arg value="-o"/>
        <arg path="${tofile}"/>
       </java>


       <echo message="${result.process}" />
  </target>

   <target name="package.concatenate">
    <echo> +++ Concatenating file before compression </echo>
    <echo>     ${html5.temp.theme.dir}${file.separator}${type}${file.separator}${to}.${html5.concatenation.prefix}.${type} </echo>

   <condition property="package.css">
      <equals arg1="${type}" arg2="css" />
    </condition>

    <concat destfile="${html5.temp.theme.dir}${file.separator}${type}${file.separator}${to}.${html5.concatenation.prefix}.${type}">
      <filelist dir="${html5.temp.libs.dir}" files="${filelist}"></filelist>
    </concat>

  </target>

  <target name="package.prepare" unless="package.prepared">

    <mkdir dir="${html5.temp.libs.dir}" />
    <echo>  +  copy into ${html5.temp.libs.dir} files from "${theme.builder.dir}${file.separator}${html5.libs.dir}</echo>
    <!-- copy main library -->
    <mkdir dir="${html5.temp.libs.dir}" />
    <copy todir="${html5.temp.libs.dir}" >
      <fileset dir="${html5.theme.config.dir}" followsymlinks="no" />
    </copy>

    <property name="package.prepare" value="yes" />
  </target>

  <target name="package.get.assets">

    <filelist id="html5.modules.dir" dir="${html5.temp.libs.dir}" files="${dirlist}"/>

    <!-- copy images -->
    <pathconvert property="img.path.converted" pathsep="," refid="html5.modules.dir">
       <mapper type="regexp" from="(.*)"  to="\1/${html5.img.dir}/" />
       <map from="${html5.temp.libs.dir}/" to="" />
    </pathconvert>

    <fileset id="html5.imgs.path" dir="${html5.temp.libs.dir}" followsymlinks="no">
      <patternset includes="${img.path.converted}">
        <exclude name="*.css" />
        <exclude name="*.js" />
        <exclude name="*.psd" />
      </patternset>
    </fileset>

    <mkdir dir="${html5.temp.theme.dir}/${html5.img.dir}"/>

    <copy todir="${html5.temp.theme.dir}/${html5.img.dir}" failonerror="false" force="true" flatten="true">
      <fileset refid="html5.imgs.path" />
    </copy>

    <!-- copy fonts -->
    <pathconvert property="fonts.path.converted" pathsep="," refid="html5.modules.dir">
       <mapper type="regexp" from="(.*)"  to="\1/${html5.fonts.dir}/" />
       <map from="${html5.temp.libs.dir}/" to="" />
    </pathconvert>

    <fileset id="html5.fonts.path" dir="${html5.temp.libs.dir}" followsymlinks="no">
      <patternset includes="${fonts.path.converted}">
        <exclude name="*.css" />
        <exclude name="*.js" />
        <include name="*.otf" />
        <include name="*.woff" />
        <include name="*.ttf" />
        <include name="*.svg" />
      </patternset>
    </fileset>

    <mkdir dir="${html5.temp.theme.dir}/${html5.fonts.dir}"/>

    <copy todir="${html5.temp.theme.dir}/${html5.fonts.dir}" failonerror="false" force="true" flatten="true">
      <fileset refid="html5.fonts.path" />
    </copy>

  </target>

  <target name="store.builded.theme.dir" unless="html5.theme.exists">
    <mkdir dir="${html5.theme.dir}" />
     <copy todir="${html5.theme.dir}">
       <fileset dir="${html5.temp.theme.dir}"/>
     </copy>
  </target>
</project>
