<project name="dita2html5" default="dita2html5" xmlns:dita="http://dita-ot.sourceforge.net">

  <import file="build-theme.xml"/>

  <dirname property="html5.dir" file="${ant.file.dita2html5}"/>

  <target name="dita2html5"
    unless="noMap"
    xmlns:dita="http://dita-ot.sourceforge.net"
    dita:depends="d4p.map-driven-build-init, build-init, preprocess, html5"
    dita:extension="depends org.dita.dost.platform.InsertDependsAction">
  </target>

  <target name="html5"
    unless="noMap"
    depends="dita.map.html5"
  />
  <target name="dita.map.html5.init" depends="package.compress" description="Initialize  HTML5 plugin properties">

    <condition property="html5.site.theme" value="${args.cssroot}">
      <isset property="args.cssroot" />
    </condition>

    <condition property="html5.site.theme" value="d4p-classic">
      <not>
        <isset property="html5.site.theme" />
      </not>
    </condition>

    <condition property="html5.build.theme.dir" value="yes">
      <not>
        <isset property="html5.site.config" />
      </not>
    </condition>

    <condition property="html5.site.js.vars" value="${html5.compression.temp.dir}/themes/${html5.site.theme}/vars.xml">
      <not>
        <isset property="html5.site.js.vars" />
      </not>
    </condition>

    <available file="${html5.site.js.vars}" property="html5.site.js.vars.exists"/>

    <condition property="html5.themes.output.dir" value="themes">
      <not>
        <isset property="args.debug" />
      </not>
    </condition>

    <condition property="http.absolute.uri" value="">
      <not>
        <isset property="http.absolute.uri" />
      </not>
    </condition>

    <property name="d4p.is.map.driven" value="true"/>

    <condition property="topics.output.dir" value="topics">
      <not>
        <isset property="topics.output.dir"/>
      </not>
    </condition>

    <condition property="html5.grid.prefix" value="grid_">
      <not>
        <isset property="html5.grid.prefix"/>
      </not>
    </condition>

    <!-- The name of the directory, within the output package, to contain all images: -->
    <condition property="images.output.dir" value="images">
      <not>
        <isset property="images.output.dir" />
      </not>
    </condition>
    
    <condition property="html5.copy.libs" value="yes">
      <and>
        <not>
          <isset property="html5.copy.libs" />
        </not>
        <isset property="args.debug" />
      </and>
    </condition>
    
    <condition property="html5.copy.assets" value="yes">
      <and>
        <not>
          <isset property="html5.copy.libs" />
        </not>
        <not>
          <isset property="args.debug" />
        </not>
      </and>
    </condition>

    <property name="html5.temp.dir" value="${dita.temp.dir}${file.separator}html5_temp"/>

    <!-- Defines the @class value to use for topic elements generated for topicheads. -->
    <condition property="title.only.topic.class.spec" value="- topic/topic ">
      <not>
        <isset property="title.only.topic.class.spec" />
      </not>
    </condition>

    <!-- Defines the @class value to use for topic title elements generated for topicheads. -->
    <condition property="title.only.topic.title.class.spec" value="- topic/title ">
      <not>
        <isset property="title.only.topic.title.class.spec" />
      </not>
    </condition>

    <basename property="dita.map.toc.root"
      file="${dita.input.filename}"
      suffix=".ditamap" />

    <condition property="args.html5.toc" value="${dita.map.toc.root}">
      <not>
        <isset property="args.html5.toc" />
      </not>
    </condition>

    <condition property="out.ext" value=".html">
      <not>
        <isset property="out.ext" />
      </not>
    </condition>

    <condition property="noPlugin">
      <equals arg1="${dita.html5.plugin}" arg2="no" />
    </condition>

    <condition property="args.compression.suffix" value="-min">
      <not>
        <isset property="args.debug" />
      </not>
    </condition>
    
    <condition property="args.compression.suffix" value="">
        <isset property="args.debug" />
    </condition>       
    
    <condition property="args.css.filename" value="style">
      <not>
        <isset property="args.css.filename" />
      </not>
    </condition>
 
    <condition property="args.css.extension" value=".css">
      <not>
        <isset property="args.css.extension" />
      </not>
    </condition> 
    
    <condition property="args.js.extension" value=".js">
      <not>
        <isset property="args.js.extension" />
      </not>
    </condition>   
    
    <condition property="args.css.file" value="">
      <not>
        <isset property="args.css.file" />
      </not>
    </condition>
    
     <condition property="args.js.filename" value="script">
      <not>
        <isset property="args.js.filename" />
      </not>
    </condition>
    
    <condition property="html5.args.theme.file" value="themes/${html5.site.theme}/${html5.css.dir}/${args.css.filename}${args.compression.suffix}${args.css.extension}">
      <not>
        <isset property="html5.args.theme.file" />
      </not>
    </condition>

    <condition property="args.js.file" value="themes/${html5.site.theme}/${html5.js.dir}/${args.js.filename}${args.compression.suffix}${args.js.extension}">
      <not>
        <isset property="args.js.file" />
      </not>
    </condition>    

    <condition property="css.output.dir" value="css">
      <not>
        <isset property="args.css.output.dir" />
      </not>
    </condition>

    <!-- the html5.themes.output.dir change in debug mode -->
    <condition property="html5.themes.output.dir" value="libs">
        <isset property="args.debug" />  
    </condition>

     <condition property="html5.themes.output.dir" value="themes">
      <not>
        <isset property="html5.themes.output.dir" />
      </not>
    </condition>

    <condition property="html5.doJavaScriptFileCopy">
      <!-- For now just always do it. -->
      <equals arg1="true" arg2="true"/>
   </condition>

    <condition property="html5.do.copy.graphics" value="true">
      <not>
        <isset property="html5.do.copy.graphics"/>
      </not>
    </condition>

    <!-- used in the xsl code to swucth navigation behavior-->
    <condition property="html5.navigation.markup" value="navigation-default">
      <not>
        <isset property="html5.navigation.markup"/>
      </not>
    </condition>

    <condition property="html5.id.main.container" value="d4h5-main-container">
      <not>
        <isset property="html5.id.main.container"/>
      </not>
    </condition>
    
    <condition property="html5.id.section.container" value="d4h5-section-container">
      <not>
        <isset property="html5.id.section.container"/>
      </not>
    </condition>
    
    <condition property="html5.class.main.container" value="container_12">
      <not>
        <isset property="html5.class.main.container"/>
      </not>
    </condition>

     <condition property="html5.class.section.container" value="">
      <not>
        <isset property="html5.class.section.container"/>
      </not>
    </condition>

    <condition property="html5.id.main.content" value="d4h5-main-content">
      <not>
        <isset property="html5.id.main.content"/>
      </not>
    </condition>

    <condition property="html5.id.navigation" value="local-navigation">
      <not>
        <isset property="html5.id.navigation"/>
      </not>
    </condition>

    <condition property="html5.class.main.content" value="grid_8">
      <not>
        <isset property="html5.class.main.content"/>
      </not>
    </condition>

    <condition property="html5.class.navigation" value="grid_4">
      <not>
        <isset property="html5.class.navigation" />
      </not>
  </condition>

  <!-- used to pass parameter to the javascript d4p obj -->
  <condition property="html5.js.options" value="">
      <not>
        <isset property="html5.js.options" />
      </not>
  </condition>

  <condition property="html5.class.body" value="centered img-with-shadow paged  ${html5.navigation.markup}">
      <not>
        <isset property="html5.class.body" />
      </not>
  </condition>

    <condition property="d4p.html5.json.vars.dir" value="${dita.temp.dir}/json">
      <not>
        <isset property="d4p.html5.json.vars.dir" />
      </not>
    </condition>

    <condition property="d4p.html5.json.vars.file" value="${d4p.html5.json.vars.dir}/vars.json">
      <not>
        <isset property="d4p.html5.json.vars.file" />
      </not>
    </condition>

  </target>
  
  <target name="dita.map.html5.echo" description="Echo HTML5 plugin properties" unless="html5.echo.done">
    <echo message="+++ html5-specific properties:"/>
    <echoproperties format="text" regex="^(html5|html2|css|user|out\.)" taskname="echo"/>
    <property name="html5.echo.done" value="yes"/>
  </target>
  
  <target name="check-html5-json-vars-urls" if="html5.site.js.vars.exists">
      <makeurl file="${d4p.html5.json.vars.file}" property="d4p.html5.json.vars.file.url"/>
  </target>

  <target 
    name="dita.map.html5" 
    depends="dita.map.html5.init, dita.map.html5.echo, html5-copy-assets, html5-copy-libs, xmltojsonvars, check-html5-json-vars-urls"
    description="Generate html5 components from input map and topics"
  >

    <mkdir dir="${html5.temp.dir}"/>
    
    <makeurl file="${output.dir}" property="html5.xslt.outdir"/>
    <makeurl file="${dita.temp.dir}" property="html5.xslt.tempdir"/>
    <makeurl file="${html5.site.config}" property="html5.xml.theme.config"/>    
    <makeurl file="${dita.input.valfile}" property="dita.input.valfile.url" validate="no"></makeurl>    

    <condition property="d4p.html5.json.vars.file.url" value="">
      <not>
        <isset property="d4p.html5.json.vars.file.url" />
      </not>
    </condition>
    
    <property name="map2html5.style" location="${html5.dir}/xsl/map2html5.xsl"/>
    <property name="args.xhtml.toc" value="index"/>

    <xslt processor="trax"
      basedir="${dita.temp.dir}"
      destdir="${output.dir}"
      includesfile="${dita.temp.dir}${file.separator}${user.input.file.listfile}"
      classpathref="dost.class.path"
      style="${map2html5.style}"
      filenameparameter="inputFileNameParam"
    >
    
       <dita:extension id="dita.html5.map" behavior="org.dita.dost.platform.InsertAction" />

       <mapper 
         type="glob"
         from="${user.input.file}"
         to="${args.xhtml.toc}${out.ext}" 
        />

    </xslt>

    <condition property="skip.copy.graphics" value="${local.skip.copy.graphics}">
      <isset property="local.skip.copy.graphics"/>
    </condition>

    <antcall target="html5.copy.graphics">
      <param name="do.copy.graphics"  value="${local.skip.copy.graphics}"/>
    </antcall>
  </target>

  <target name="html5.copy.graphics" unless="skip.copy.graphics"
    description="Copies graphics from input to the output directory based on the graphic map generated during html5 generation">
    <ant antfile="${output.dir}/copy-graphics.xml">
    </ant>
    </target>

  <target name="html5-copy-dyntoc-javascript"  description="Copy JavaScript files"
    depends="dita.map.html5.init"
    if="html5.doDynTocFileCopy">
    <copy todir="${output.dir}">
      <fileset dir="${html5.dir}/dynamic-toc-support">
        <include name="**/*"/>
      </fileset>
    </copy>

  </target>

  <target name="html5-copy-css"  description="Copy CSS files" depends="dita.map.html5.init" >
    <condition property="user.copycss.yes">
      <isset property="args.css.present"/>
    </condition>
    <property name="user.csspath.real" value="${output.dir}${file.separator}${css.output.dir}"/>
    <mkdir dir="${user.csspath.real}"/>
    <!-- Always copy system default css files -->
    <copy todir="${user.csspath.real}">
      <fileset dir="${dita.resource.dir}" includes="*.css"/>
    </copy>
    <copy todir="${output.dir}">
      <fileset dir="${dita.resource.dir}" includes="*.css"/>
    </copy>
    <copy todir="${user.csspath.real}">
      <fileset dir="${html5.dir}/css">
        <include name="**/*"/>
      </fileset>
    </copy>
    <!-- Copy user specify css file when required -->
    <antcall target="html5-copy-css-user"/>
    <antcall target="html5-copy-javascript"/>
  </target>

  <target name="html5-copy-assets"  description="Copy assets files for production" if="${html5.copy.assets}" depends="dita.map.html5.init">

    <mkdir dir="${output.dir}/${html5.themes.output.dir}/${html5.site.theme}"/>
    
    <copy todir="${output.dir}/${html5.themes.output.dir}/${html5.site.theme}">
      <fileset dir="${html5.compressor.build.dir}"/>
    </copy>

  </target>
  
  <target name="check.libs.exists"  description="Check if the library directory exists in the output directory">
    <condition property="html5.themes.output.dir.exists">
      <available file="${output.dir}/${html5.compression.temp.dir.name}" type="dir"/>
    </condition>
    
    <condition property="html5.prevent.copy.libs">
       <isset property="html5.themes.output.dir.exists" />
    </condition>
</target>
  
  <target name="confirm.libs.exists"  description="Output confirmation message if the library directory exists in the output directory" if="html5.themes.output.dir.exists">
    <echo> [WARNING] There is already a copy of the library directory in the ouput directory, delete it manually if you want a fresh copy. This is to avoid overriding your change during development.</echo>
  </target>
  
  <target name="html5-copy-libs"  description="Copy assets files for development" depends="dita.map.html5.init, check.libs.exists, confirm.libs.exists" if="${html5.copy.libs}" unless="html5.prevent.copy.libs">
  
    <mkdir dir="${output.dir}/${html5.libs.dir}"/>
    
    <copy todir="${output.dir}/${html5.libs.dir}">
      <fileset dir="${html5.compression.temp.dir}"/>
    </copy>

  </target>
  
  <target name="html5-copy-css-user" if="user.copycss.yes">
    <copy file="${args.css.real}" todir="${user.csspath.real}"/>
  </target>


  <target name="html5-copy-javascript"  description="Copy JavaScript files"
    depends="dita.map.html5.init"
    if="html5.doJavaScriptFileCopy">
    <!-- FIXME: Parameterize the location of the JavaScript files -->
    <mkdir dir="${output.dir}/js"/>
    <copy todir="${output.dir}/js">
      <fileset dir="${html5.dir}/js">
        <include name="**/*"/>
      </fileset>
    </copy>

  </target>
  
   <!-- FIXME: Move to xsl code directly -->
  <target name="xmltojsonvars" description="Convert XML variables to a json feed" if="html5.site.js.vars.exists">
  
  <property name="xml2json.style" location="${html5.dir}/xsl/xml2json/xml-to-json.xsl"/>
  
    <mkdir dir="${d4p.html5.json.vars.dir}" />
    
  <xslt processor="trax"
      in="${html5.site.js.vars}"
      out="${d4p.html5.json.vars.file}"
      extension=".json"
      style="${xml2json.style}">

      <param name="jsonp" expression="d4p.setProps"/>

  </xslt>

  </target>

  
</project>
